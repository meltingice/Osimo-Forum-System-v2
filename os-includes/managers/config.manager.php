<?
/**
 * Loads and manages the sites configuration options.
 *
 * @author Ryan LeFevre
 */
class ConfigManager {
	private static $INSTANCE;
	
	private $config, $userConfig;
	
	private function ConfigManager() {
		$this->config = array();
		$this->userConfig = array();
	}
	
	/**
	 * Gets the singleton instance of the ConfigManager.
	 */
	public static function instance() {
		if(is_null(self::$INSTANCE)) {
			self::$INSTANCE = new ConfigManager();
		}
		
		return self::$INSTANCE;
	}
	
	/**
	 * Loads the site configuration from the database's config table
	 * and stores it in the class $config array.
	 */
	public function load() {
		if (!isset($_SESSION['config']) || !is_array($_SESSION['config']) || count($_SESSION['config']) == 0) {
			get('debug')->logMsg('Osimo', 'events', "Loading site config from database...");
			$data = get('db')->select('*')->from('config')->rows(true);
			foreach ($data as $conf) {
				$this->config[$conf['name']] = $conf['value'];
			}
			$_SESSION['config'] = $this->config;
		}
		else {
			get('debug')->logMsg('Osimo', 'events', "Loading site config from saved session.");
			$this->config = $_SESSION['config'];
		}

		get('debug')->logMsg('Osimo', 'events', "Site config: ".print_r($this->config, true));

		define('OS_SITE_TITLE', $this->config['site_title']);
		define('OS_SITE_DESC', $this->config['site_description']);
	
	}
	
	/**
	 * Returns all configuration options that are currently loaded.
	 */
	public function getAll() {
		return array_merge($this->config, $this->userConfig);
	}
	
	/**
	 * Returns the configuration item specified by name.
	 *
	 * @param $name
	 *		The name of the configuration item to return.
	 */
	public function get($name) {
		if(isset($this->config[$name])) {
			return $this->config[$name];
		} elseif(isset($this->userConfig[$name])){
			return $this->userConfig[$name];
		} else {
			throw new Exception("Config variable $name not set.");
		}
	}
	
	public function register_user_config($config) {
		$this->userConfig = $config;
	}
	
	/**
	 * Used to automatically write out the config.php file to disk.
	 * Make sure every operation is successful, or else it throws
	 * an exception.
	 */
	public static function write_config_to_disk($config, $path=false) {
		$data = trim("
		<?
		/*
		 * WARNING: DO NOT MODIFY THIS FILE
		 * (unless you know what you are doing)
		 * 
		 * This file is automatically generated by Osimo and tampering
		 * with it by hand could potentially cause issues.
		 */
		
		###### BEGIN AUTO GENERATED CONTENT ######\n");
		$data .= "\n".self::format_config_for_write($config)."\n";
		$data .= trim("
		###### END AUTO GENERATED CONTENT ######

		include('loader.php');
		?>");
		
		if(!$path) {
			$path = ABS_INC;
		}
		
		if(!is_writable($path)) {
			throw new Exception("Cannot write to the os-includes folder, make sure the folder permissions allow writing and try again.");
		}
		
		$path .= "/config.php";
		
		if(!touch($path)) {
			throw new Exception("Unable to create os-includes/config.php, please check the folder permissions and try again.");
		}
		
		if(!$fh = fopen($path, 'w')) {
			throw new Exception("Cannot open os-includes/config.php for writing, please check its permissions and try again.");
		}
		
		if(fwrite($fh, $data) === false) {
			throw new Exception("Cannot write to os-includes/config.php, please check its permissions and try again.");
		}
		
		fclose($fh);
		
		return true;
	}
	
	private static function format_config_for_write($config) {
		$final = '$config = ' . self::parse_config_array($config) . ";";
		
		return $final;
	}
	
	private static function parse_config_array($config) {
		$sec = "\tarray(\n";
		$i = 0;
		foreach($config as $key=>$val) {
			if(!is_numeric($key)) { 
				$key = "'$key'";
			}
			
			if(is_array($val)) {
				$sec .= "\t$key => \n".self::parse_config_array($val)."";
			} else {
				$sec .= "\t$key => '$val'";
			}
			
			if($i != count($config) - 1) {
				$sec .= ",\n";
			}
			
			$i++;
		}
		
		$sec .= "\n\t)";
		
		return $sec;
	}

}
?>